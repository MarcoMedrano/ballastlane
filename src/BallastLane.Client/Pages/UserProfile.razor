@page "/user"
@using BallastLane.Infraestructure.Api


<PageTitle>User Profile</PageTitle>

<AuthorizeView Roles=@Roles.ServerAuthenticated>
    <Authorized>

        <MudStack AlignItems="AlignItems.Center">
            <MudAvatar Style="height:128px; width:128px;">
                <MudImage Src=@User.ProfilePicture></MudImage>
            </MudAvatar>
            <MudText Typo="Typo.caption">@User.Id</MudText>
            <MudDivider/>
            <br/>
            <MudTextField T=@string bind-Value=@User.NickName Variant=@Variant.Text Label="NickName" ReadOnly=@(!Edit) Required=@true/>
            <MudTextField T=@string bind-Value=@User.ProfilePicture Variant=@Variant.Text Label="Profile Picture Url" ReadOnly=@(!Edit) Required=@true/>
            <MudDivider/>
            <MudButton OnClick=@Save>Save</MudButton>
        </MudStack>
    </Authorized>
    <NotAuthorized>
        Please login using Metamask Icon.
    </NotAuthorized>
</AuthorizeView>

@* <MudProgressCircular Color="Color.Default" Indeterminate="true"/> *@

@code {

    [Parameter]
    public bool Edit { get; set; } = true;

    [CascadingParameter]
    UserState UserState { get; set; }

    [Inject]
    IUsersController Api { get; set; }

    UserDto User => UserState.User;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(User.Id)) return;
        UserState.User = await Api.GetById(User.Id);
        StateHasChanged();
    }

    private async Task Save()
    {
        await Api.Update(User);
    }
}